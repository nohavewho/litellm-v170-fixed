#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã LiteLLM v1.70.0
–†–∞–∑–¥–µ–ª 6: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ Redis
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_URL = "https://litellm-v170-fixed-final-production.up.railway.app"
MASTER_KEY = "sk-9b8d676797b1c546d8b5f3ba871cfec6220dcd9d14f96dce616edcb6f904b582"
TIMEOUT = 30

def print_header(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
    print("\n" + "=" * 60)
    print(f"üîç {title}")
    print("=" * 60)

def print_success(message: str):
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"‚úÖ {message}")

def print_error(message: str):
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print(f"‚ùå {message}")

def print_info(message: str):
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üìã {message}")

def check_health_endpoint() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /health/readiness
    –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: 200 OK
    """
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    try:
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /health/readiness...")
        response = requests.get(f"{BASE_URL}/health/readiness", timeout=TIMEOUT)
        
        if response.status_code == 200:
            print_success(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            try:
                health_data = response.json()
                print_info(f"–î–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è: {json.dumps(health_data, indent=2, ensure_ascii=False)}")
            except:
                print_info(f"–û—Ç–≤–µ—Ç: {response.text}")
            return True
        else:
            print_error(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            print_error(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    
    except requests.RequestException as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False

def check_models_endpoint() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç /v1/models
    –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: JSON —Å –º–æ–¥–µ–ª—å—é "gemini-pro-load-balanced"
    """
    print_header("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    try:
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /v1/models...")
        headers = {
            "Authorization": f"Bearer {MASTER_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.get(f"{BASE_URL}/v1/models", headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 200:
            models_data = response.json()
            print_success(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if "data" in models_data and isinstance(models_data["data"], list):
                models = models_data["data"]
                print_info(f"–ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π:")
                
                # –ü–æ–∏—Å–∫ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
                target_model = "gemini-pro-load-balanced"
                found_target = False
                
                for model in models:
                    model_id = model.get("id", "unknown")
                    print_info(f"  - {model_id}")
                    
                    if model_id == target_model:
                        found_target = True
                        print_success(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: {target_model}")
                
                if found_target:
                    print_success("–ú–æ–¥–µ–ª—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True
                else:
                    print_error(f"–¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å '{target_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–æ–¥–µ–ª–µ–π")
                return False
        else:
            print_error(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            print_error(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    
    except requests.RequestException as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_chat_completion() -> bool:
    """
    –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç /chat/completions
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    """
    print_header("–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏")
    
    try:
        print_info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ /chat/completions...")
        
        headers = {
            "Authorization": f"Bearer {MASTER_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gemini-pro-load-balanced",
            "messages": [
                {
                    "role": "user",
                    "content": "What is the distance between Earth and the Moon?"
                }
            ],
            "max_tokens": 100
        }
        
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            completion_data = response.json()
            print_success(f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if "choices" in completion_data and len(completion_data["choices"]) > 0:
                choice = completion_data["choices"][0]
                message = choice.get("message", {})
                content = message.get("content", "")
                
                print_info(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {content[:200]}...")
                print_success("–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                return False
        else:
            print_error(f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ—É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            print_error(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    
    except requests.RequestException as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        return False

def test_cache_functionality() -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ Redis
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–≤–∞–∂–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print_header("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ Redis")
    
    try:
        print_info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
        
        headers = {
            "Authorization": f"Bearer {MASTER_KEY}",
            "Content-Type": "application/json"
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞
        payload = {
            "model": "gemini-pro-load-balanced",
            "messages": [
                {
                    "role": "user",
                    "content": "What is 2+2? Please answer with just the number."
                }
            ],
            "max_tokens": 10,
            "temperature": 0  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        }
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print_info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        response1 = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=TIMEOUT
        )
        first_duration = time.time() - start_time
        
        if response1.status_code != 200:
            print_error(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response1.status_code})")
            return False
        
        print_info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {first_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        time.sleep(1)
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω)
        print_info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        response2 = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=TIMEOUT
        )
        second_duration = time.time() - start_time
        
        if response2.status_code != 200:
            print_error(f"–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response2.status_code})")
            return False
        
        print_info(f"–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {second_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if second_duration < first_duration * 0.8:  # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ
            print_success("–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –±—ã—Å—Ç—Ä–µ–µ.")
            print_info(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {((first_duration - second_duration) / first_duration * 100):.1f}%")
            return True
        else:
            print_error("–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ.")
            print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏ –ª–æ–≥–∏ LiteLLM")
            return False
    
    except requests.RequestException as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–µ—à–∞: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    print("üöÄ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã LiteLLM v1.70.0")
    print("üéØ –†–∞–∑–¥–µ–ª 6: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = 4
    passed_tests = 0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", check_health_endpoint),
        ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", check_models_endpoint),
        ("–°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞", test_chat_completion),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞", test_cache_functionality)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}")
        if test_func():
            passed_tests += 1
            print_success(f"–¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print_error(f"–¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_header("–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print_info(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print_success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!")
        print_info("‚ú® LiteLLM v1.70.0 —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print_info("üéØ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É 120 –∫–ª—é—á–∞–º–∏ Gemini –∞–∫—Ç–∏–≤–Ω–∞")
        print_info("üíæ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print_error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        print_info("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)