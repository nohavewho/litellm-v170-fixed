#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π Gemini –≤ LiteLLM v1.70.0
–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–º—É –ø–ª–∞–Ω—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—É—é –≥—Ä—É–ø–ø—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ "gemini-pro-load-balanced"
–∏–∑ 120 API –∫–ª—é—á–µ–π Gemini –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
"""

import os
import sys
import psycopg2
import json
from typing import List

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit(1)

# –ò–º—è —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏ API (–∫–∞–∂–¥—ã–π –∫–ª—é—á –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
KEYS_FILE = "gemini_keys.txt"

# –û–±—â–µ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
LOAD_BALANCED_MODEL_NAME = "gemini-pro-load-balanced"

def load_api_keys() -> List[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞.
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π
    """
    try:
        with open(KEYS_FILE, 'r') as f:
            api_keys = [line.strip() for line in f if line.strip()]
        
        if not api_keys:
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {KEYS_FILE} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
            
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(api_keys)} –∫–ª—é—á–µ–π API –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return api_keys
    
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {KEYS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {KEYS_FILE}: {e}")
        return []

def seed_models(api_keys: List[str]) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –º–æ–¥–µ–ª–µ–π LiteLLM –∫–ª—é—á–∞–º–∏ Gemini.
    
    Args:
        api_keys (List[str]): –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        # --- –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º–æ–¥–µ–ª–µ–π ---
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º '{LOAD_BALANCED_MODEL_NAME}'...")
        cur.execute(
            'DELETE FROM "LiteLLM_ProxyModelTable" WHERE model_name = %s',
            (LOAD_BALANCED_MODEL_NAME,)
        )
        deleted_count = cur.rowcount
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        
        # --- –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π ---
        print("üìù –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–µ–π...")
        insert_query = """
        INSERT INTO "LiteLLM_ProxyModelTable" (model_name, litellm_params, model_info)
        VALUES (%s, %s, %s)
        """
        
        inserted_count = 0
        for i, key in enumerate(api_keys):
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            litellm_params = {
                "model": "gemini/gemini-2.5-pro",
                "api_key": key
            }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            model_info = {
                "id": f"gemini-pro-key-{i+1:03d}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                "description": f"Gemini Pro API Key #{i+1:03d}",
                "load_balanced": True
            }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            cur.execute(insert_query, (
                LOAD_BALANCED_MODEL_NAME,
                json.dumps(litellm_params),
                json.dumps(model_info)
            ))
            inserted_count += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            if (i + 1) % 10 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(api_keys)} –∫–ª—é—á–µ–π...")
        
        # –§–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–µ–π –ø–æ–¥ –æ–±—â–∏–º –∏–º–µ–Ω–µ–º '{LOAD_BALANCED_MODEL_NAME}'.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        cur.execute(
            'SELECT COUNT(*) FROM "LiteLLM_ProxyModelTable" WHERE model_name = %s',
            (LOAD_BALANCED_MODEL_NAME,)
        )
        final_count = cur.fetchone()[0]
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {final_count} –∑–∞–ø–∏—Å–µ–π —Å –∏–º–µ–Ω–µ–º '{LOAD_BALANCED_MODEL_NAME}'")
        
        return True
        
    except psycopg2.Error as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL: {error}")
        return False
    except Exception as error:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'conn' in locals() and conn is not None:
            cur.close()
            conn.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Gemini –¥–ª—è LiteLLM v1.70.0")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π
    api_keys = load_api_keys()
    if not api_keys:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏. –í—ã—Ö–æ–¥.")
        sys.exit(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {len(api_keys)} –º–æ–¥–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º '{LOAD_BALANCED_MODEL_NAME}'")
    print("‚ö†Ô∏è  –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!")
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    if seed_models(api_keys):
        print("=" * 60)
        print("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üéØ –ú–æ–¥–µ–ª—å '{LOAD_BALANCED_MODEL_NAME}' –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –º–æ–¥–µ–ª—å –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏")
    else:
        print("=" * 60)
        print("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main()